 int find_next_larger(tree_node_t *tree, int q)
 {
    tree_node_t *tmp_node;
    tree_node_t * maxNode;
    if( tree->left == NULL )
    {
         return(0);
    }
    else
    {
     int counter = 0;
     key_t Array[tree->height];
     tmp_node = tree;
     maxNode = tree;

     while(maxNode->right != NULL)
     {
         maxNode = maxNode->right;
     }
     while( tmp_node->right != NULL )
       {
           Array[counter] = tmp_node->key;
           counter++;
           if( q < tmp_node->key )
             {
                 tmp_node = tmp_node->left;
             }
           else
           {
               tmp_node = tmp_node->right;
           }
       }
     if(maxNode->key < q)
     {
         return(q);
     }
     else if(tmp_node->key > q)
     {
         return (tmp_node->key);
     }
     else
     {
     Array[counter] = tmp_node->key;
     q = tmp_node->key;
     for(counter; counter > -1; counter--)
     {
         if(Array[counter] > q)
         {
             q = Array[counter];
             break;
         }
     }

      tmp_node = tree;
      while( tmp_node->right != NULL )
       {
           if( q < tmp_node->key )
             {
                 tmp_node = tmp_node->left;
             }
           else
           {
               tmp_node = tmp_node->right;
           }
       }

     return (tmp_node->key);
     }
}